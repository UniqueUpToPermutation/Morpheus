#include "BasicStructures.hlsl"
#include "Math.hlsl"

cbuffer Globals
{
    RendererGlobalData mGlobals;
}

Texture2D		mAlbedo;
SamplerState	mAlbedo_sampler;

Texture2D		mMetallic;
SamplerState	mMetallic_sampler;

Texture2D 		mRoughness;
SamplerState	mRoughness_sampler;

Texture2D		mNormalMap;
SamplerState	mNormalMap_sampler;

#if USE_IBL
TextureCube   mIrradianceMap;
SamplerState  mIrradianceMap_sampler;

TextureCube   mPrefilteredEnvMap;
SamplerState  mPrefilteredEnvMap_sampler;

Texture2D     mBRDF_LUT;
SamplerState  mBRDF_LUT_sampler;
#endif

// Constant normal incidence Fresnel factor for all dielectrics.
const float3 Fdielectric = float3(0.04);

void main(in float4 ClipPos : SV_Position,
	in float3 WorldPos 		: WORLD_POS,
    in float3 Normal    	: NORMAL,
	in float3 Tangent 	 	: TANGENT,
	in float2 UV	      	: UV0,
    out float4 OutColor 	: SV_Target)
{
	uint env_width;
	uint env_height;
	uint env_levels;
	mPrefilteredEnvMap.GetDimensions(0, env_width, env_height, env_levels);

	// Sample available textures
	float3 albedo = mAlbedo.Sample(mAlbedo_sampler, UV).rgb;
	float metalness = mMetallic.Sample(mMetallic_sampler, UV).r;
	float roughness = mRoughness.Sample(mRoughness_sampler, UV).r;
	float3 normalPerturb = mNormalMap.Sample(mNormalMap_sampler, UV).rgb;

	// Apply normal map
	Normal = PerturbNormal(Normal, Tangent, normalPerturb);

	// Compute reflection directions
	float3 N = normalize(Normal);
	float3 Lo = normalize(mGlobals.mCamera.f4Position.xyz - WorldPos);
	float3 Lr = -reflect(Lo, N);
	float NoR = saturate(dot(Lo, N));

	// Fresnel reflectance at normal incidence (for metals use albedo color).
	float3 F0 = lerp(Fdielectric, albedo, metalness);
	float3 F = FresnelSchlick(F0, NoR);

	// Get diffuse contribution factor (as with direct lighting).
	float3 kd = lerp(float3(1.0) - F, float3(0.0), metalness);

	// Irradiance map contains exitant radiance assuming Lambertian BRDF, no need to scale by 1/PI here either.
	float3 diffuseIBL = kd * albedo * mIrradianceMap.Sample(mIrradianceMap_sampler, N);

	// Sample pre-filtered specular reflection environment at correct mipmap level.
	float3 specularIrradiance = mPrefilteredEnvMap.SampleLevel(mPrefilteredEnvMap_sampler, Lr, roughness * (env_levels - 1)).rgb;

	// Split-sum approximation factors for Cook-Torrance specular BRDF.
	float2 specularBRDF = mBRDF_LUT.Sample(mBRDF_LUT_sampler, float2(roughness, NoR)).rg;

	// Total specular IBL contribution.
	float3 specularIBL = (F0 * specularBRDF.x + specularBRDF.y) * specularIrradiance;
	float3 ambientLighting = diffuseIBL + specularIBL;

	OutColor = float4(ambientLighting, 1.0);
}